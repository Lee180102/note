flutter:








	- 结构分析：
		- 导入包
			- import 'package:flutter/material.dart';
		- 应用入口
			- void main() => runApp(new MyApp());
					|			| 		  |	
					|			|		  |- 类实例，Flutter应用
					|			|	
					|			|- 启动Flutter应用，接受Widget参数
					|
					|- 应用程序入口
		- 应用结构
			-	class MyApp extends StatelessWidget {
				  @override
				  Widget build(BuildContext context) {
				    return new MaterialApp(
				      //应用名称  
				      title: 'Flutter Demo', 
				      //主题
				      theme: new ThemeData(
				        //蓝色主题  
				        primarySwatch: Colors.blue,
				      ),
				      //应用首页路由  
				      home: new MyHomePage(title: 'Flutter Demo Home Page'),
				    );
				  }
				}

			- 应用继承StatelessWidget类，
			- 在Flutter中，大多数东西都是widget（组件）
			- 在构建页面时，会调用组件的build方法，来描述如何构建UI界面（通常是通过组合、拼装其它基础widget）。
			- MaterialApp 是Material库中提供的Flutter APP框架，通过它可以设置应用的名称、主题、语言、首页及路由列表等。MaterialApp也是一个widget。
			- Scaffold 是Material库中提供的页面脚手架，它包含导航栏和Body以及FloatingActionButton。
			- home 为Flutter应用的首页

		- 首页
			- 	class MyHomePage extends StatefulWidget {
				  MyHomePage({Key key, this.title}) : super(key: key);
				  final String title;
				  @override
				  _MyHomePageState createState() => new _MyHomePageState();
				}

				class _MyHomePageState extends State<MyHomePage> {
				 ...
				}

			- MyHomePage 被指定为应用首页，继承自StatefulWidget，表示它是一个有状态的widget
			- Stateful widget 和Stateless widget有两点不同：
				- Stateful widget可以拥有状态，这些状态在widget生命周期中是可以变的，而Stateless widget是不可变的。
				- Stateful widget至少由两个类组成：
					- 一个StatefulWidget类。
					- 一个 State类； StatefulWidget类本身是不变的，但是 State类中持有的状态在widget生命周期中可能会发生变化。
			- _MyHomePageState 类，是MyHomePage类对应的状态类
				- MyHomePage类中并没有build方法，build方法被挪到了_MyHomePageState方法中
				- _MyHomePageState中都包含哪些东西：
					- 状态。
						- int _counter = 0;
							- 用来保存右下角按钮的点击次数。
							
					- 设置状态的自增函数。
						-	void _incrementCounter() {
							  setState(() {
							     _counter++;
							  });
							}
						- 点击按钮，调用setState 函数使 _counter 自增， setState方法被调用，将通知Flutter框架状态改变，Flutter框架会根据build方法冲i性能构建界面。
						
					- 构建UI界面
						- 完成build方法
							- MyHomePage第一次创建时，_MyHomePageState类会被同时创建，初始化完成后，Flutter框架会调用_MyHomePageState Widget中的build方法来构建widget树，最终将widget树渲染到设备屏幕上。

						- 	 Widget build(BuildContext context) {
							    return new Scaffold(
							      appBar: new AppBar(
							        title: new Text(widget.title),
							      ),
							      body: new Center(
							        child: new Column(
							          mainAxisAlignment: MainAxisAlignment.center,
							          children: <Widget>[
							            new Text(
							              'You have pushed the button this many times:',
							            ),
							            new Text(
							              '$_counter',
							              style: Theme.of(context).textTheme.display1,
							            ),
							          ],
							        ),
							      ),
							      floatingActionButton: new FloatingActionButton(
							        onPressed: _incrementCounter,
							        tooltip: 'Increment',
							        child: new Icon(Icons.add),
							      ),
							    );
							  }

							- Scaffold 一个widget, 它提供了默认的导航栏、标题和包含主屏幕widget树的body属性。
							- body的widget树中包含了一个Center widget，Center 可以将其子widget树对齐到屏幕中心
							- Center 子widget是一个Column widget，Column的作用是将其所有子widget沿屏幕垂直方向依次排列， 
							- Column包含两个 Text子widget，第一个Text widget显示固定文本 “You have pushed the button this many times:”，第二个Text widget显示_counter状态的数值。
							- floatingActionButton是页面右下角的带“➕”的悬浮按钮，它的onPressed属性接受一个回调函数，代表它被点击后的处理器，本例中直接将_incrementCounter作为其处理函数。

















							  

	- 路由管理
	
		- 创建一个新的Widget类
		
			-	class NewRoute extends StatelessWidget {
				  @override
				  Widget build(BuildContext context) {
				    return Scaffold(
				      appBar: AppBar(
				        title: Text("New route"),
				      ),
				      body: Center(
				        child: Text("This is new route"),
				      ),
				    );
				  }
				}
			- 新类继承StatelessWidget/StatefulWidget

		- 在上一级页面的build方法中的Column的子widget中添加按钮（FlatButton）
			- Column(
			      mainAxisAlignment: MainAxisAlignment.center,
			      children: <Widget>[
			      ... //省略无关代码
			      FlatButton(
			         child: Text("open new route"),
			         textColor: Colors.blue,
			         onPressed: () {
			          //导航到新路由   
			          Navigator.push( context,
			           new MaterialPageRoute(builder: (context) {
			                  return new NewRoute();
			             }));
			          },
			         ),
			       ],
			 )

			- 这里添加了一个打开新路由的的按钮，颜色为蓝色，点击打开页面。

		- MaterialPageRoute
			- MaterialPageRoute继承自PageRoute类
				- PageRoute类是一个抽象类，表示占有整个屏幕空间的一个模态路由页面，
					- 定义了路由构建及切换时过渡动画的相关接口及属性。
				- MaterialPageRoute 构造函数的各个参数的意义：
					- MaterialPageRoute({
					    WidgetBuilder builder,
					    RouteSettings settings,
					    bool maintainState = true,
					    bool fullscreenDialog = false,
					  })
						- builder 
							- WidgetBuilder类型的回调函数，
							- 作用是构建路由页面的具体内容
							- 返回值是一个widget。通常要实现此回调，返回新路由的实例
						- settings 
							- 包含路由的配置信息，如路由名称、是否初始路由（首页）
						- maintainState
							- 默认情况下，当入栈一个新路由时，原来的路由仍然会被保存在内存中，如果想在路由没用的时候释放其所占用的所有资源，可以设置maintainState为false。
						- fullscreenDialog
							- 新的路由页面是否是一个全屏的模态对话框，在iOS中，如果fullscreenDialog为true，新页面将会从屏幕底部滑入（而不是水平方向）。

		- Navigator
			- 一个路由管理的widget，
			- 它通过一个栈来管理一个路由widget集合。
			- 通常当前屏幕显示的页面就是栈顶的路由。
			- 提供了一系列方法来管理路由栈，
				- Future push(BuildContext context, Route route)
					- 将给定的路由(Widget类)入栈（即打开新的页面）
					- 返回值是一个Future对象，用以接收新路由出栈（即关闭）时的返回数据。
				- bool pop(BuildContext context, [ result ])
					- 将栈顶路由（当前打开的页面）出栈，
					- result为页面关闭时返回给上一个页面的数据。
				- 其他方法参考API
		
			- Navigator类中第一个参数为context的静态方法,都对应一个Navigator的实例方法，
				- 如Navigator.push(BuildContext context, Route route)  等价于  Navigator.of(context).push(Route route)

		- 命名路由
			- 即给路由起一个名字，然后可以通过路由名字直接打开新的路由。
			
			- 路由表
				- 使用命名路由前，必须先提供并注册一个路由表（routing table）
				- 应用程序才知道哪个名称与哪个路由Widget对应。
				- 路由表的定义如下：
					- Map<String, WidgetBuilder> routes;
				- 它是一个Map， key 为路由的名称，是个字符串；value是个builder回调函数，用于生成相应的路由Widget。
				- 通过路由名称入栈新路由时，应用会根据路由名称，在路由表中， 找到对应的WidgetBuilder回调函数， 然后调用该回调函数生成路由widget并返回。
			- 注册路由表
				- 先注册路由表后
				- Flutter应用才能正确处理命名路由的跳转
				- 注册方式很简单:
					- 在MyApp类的build方法中找到MaterialApp
					- 添加routes属性
					- 	return new MaterialApp(
						  title: 'Flutter Demo',
						  theme: new ThemeData(
						    primarySwatch: Colors.blue,
						  ),
						  //注册路由表
						  routes:{
						   "new_page":(context)=>NewRoute(),
						  } ,
						  home: new MyHomePage(title: 'Flutter Demo Home Page'),
						);
			- 通过路由名打开新路由页
				- 通过路由名称来打开新路由，可以使用：
					- Future pushNamed(BuildContext context, String routeName,{Object arguments})
				- Navigator 除了pushNamed方法，还有pushReplacementNamed等其他管理命名路由的方法，可以自行查看API文档。
				- 路由名来打开新的路由页，修改FlatButton的onPressed回调代码
					-	onPressed: () {
						  Navigator.pushNamed(context, "new_page");  
						},
			- 命名路由参数
				- 命名路由如何传递并获取路由参数：
					- 注册一个路由：
						- 	routes:{
							   "new_page":(context)=>EchoRoute(),
							  } ,
					- 在路由页通过RouteSetting对象获取路由参数：
						-	class EchoRoute extends StatelessWidget {
							  @override
							  Widget build(BuildContext context) {
							    //获取路由参数  
							    var args=ModalRoute.of(context).settings.arguments
							    //...省略无关代码
							  }
							}
					- 在打开路由时传递参数
						- Navigator.of(context).pushNamed("new_page", arguments: "hi");











	- 包管理
		- 一个完整的应用程序会依赖很多第三方包，Flutter也有自己的依赖管理工具，使用配置文件pubspec.yaml（位于项目根目录）来管理第三方依赖包。
		- 各个字段的意义：
			- name：应用或包名称。
			- description: 应用或包的描述、简介。
			- version：应用或包的版本号。
			- dependencies：应用或包依赖的其它包或插件。
			- dev_dependencies：开发环境依赖的工具包（而不是flutter应用本身依赖的包）。
			- flutter：flutter相关的配置选项。
			- Flutter应用本身依赖某个包，需要将所依赖的包添加到dependencies 下
		- Pub仓库
			- Pub（https://pub.dartlang.org/ ）是Google官方的Dart Packages仓库，类似于node中的npm仓库，
		- 添加flutter依赖
			- 将english_words（3.1.3版本）添加到依赖项列表，如下：
				-	dependencies:
					  flutter:
					    sdk: flutter

					  cupertino_icons: ^0.1.0
					  # 新添加的依赖
					  english_words: ^3.1.3
			- 下载包
				- 方式一
					- 编辑器视图中查看pubspec.yaml时，单击右上角的 Packages get 。
					- 依赖包安装到您的项目。您可以在控制台中看到以下内容：
						-	flutter packages get
							Running "flutter packages get" in flutter_in_action...
							Process finished with exit code 0
				- 方式二
					- 也可以在控制台，定位到当前工程目录，然后手动运行flutter packages get 命令来下载依赖包。
				- 其它依赖方式
					- 依赖本地包和git仓库。
						- 依赖本地包
							- 本地开发一个包，包名为pkg1，我们可以通过下面方式依赖：
								- 	dependencies:
									    pkg1:
									        path: ../../code/pkg1
								- 路径可以是相对的，也可以是绝对的。
						- 依赖Git
							- 如果软件包位于仓库的根目录中，请使用以下语法
								- 	dependencies:
									  pkg1:
									    git:
									      url: git://github.com/xxx/pkg1.git
							- 不是这种情况，可以使用path参数指定相对位置，
								-	dependencies:
									  package1:
									    git:
									      url: git://github.com/flutter/packages.git
									      path: packages/package1







	- 资源管理												
		- 描述
			- Flutter应用程序可以包含代码和 assets（有时称为资源）
			- assets是会打包到程序安装包中的，可在运行时访问
			- 常见类型的assets包括静态数据（例如JSON文件）、配置文件、图标和图片（JPEG，WebP，GIF，动画WebP / GIF，PNG，BMP和WBMP）等。
		- 指定 assets
			- Flutter使用pubspec.yaml文件来管理应用程序所需的资源
				- 	flutter:
					  assets:
					    - assets/my_icon.png
					    - assets/background.png
			- assets指定应包含在应用程序中的文件。
			- 每个asset都通过相对于pubspec.yaml文件所在位置的显式路径进行标识。
			- asset的实际目录可以是任意文件夹（在本示例中是assets）
			-在构建期间，Flutter将asset放置到称为 asset bundle 的特殊存档中，应用程序可以在运行时读取它们（但不能修改）。
		- Asset 变体（variant）
			- 构建过程支持asset变体的概念：
				- 不同版本的asset（静态文件）可能会显示在不同的上下文中（上下级路径）。
				- 在pubspec.yaml的assets部分中指定asset路径时，构建过程中，会在相邻子目录中查找具有相同名称的任何文件。
				- 这些文件随后会与指定的asset一起被包含在asset bundle中。		
				- 如，如果应用程序目录中有以下文件:
					-	…/pubspec.yaml
						…/graphics/my_icon.png
						…/graphics/background.png
						…/graphics/dark/background.png
						…etc.
				- 然后pubspec.yaml文件中只需包含:
					-	flutter:
						  assets:
						    - graphics/background.png
				- 应用程序目录中的两个graphics/background.png和graphics/dark/background.png 都将包含在您的asset bundle中。
				- 前者被认为是main asset （主资源），后者被认为是一种变体（variant）。
				- 在选择 匹配当前设备的分辨率的图片时，Flutter会使用到asset（文件）变体，
		- 加载 assets
			- 应用可以通过AssetBundle对象访问asset 。
			- 主要方法允许从Asset bundle中加载字符串或图片(二进制)文件。
				- 加载文本assets
					-通过rootBundle 对象加载： 
						- 每个Flutter应用程序都有一个rootBundle对象， 
						- 通过它可以访问主资源包，
						- 使用package:flutter/services.dart中全局静态的rootBundle对象来加载asset即可。
					- 通过 DefaultAssetBundle 加载：
						- 使用 DefaultAssetBundle 来获取当前BuildContext的AssetBundle。
						- 这种方法不是使用应用程序构建的默认asset bundle，
						- 而是使父级widget在运行时动态替换的不同的AssetBundle，这对于本地化或测试场景很有用
					- 可以使用DefaultAssetBundle.of()在应用运行时来间接加载asset（例如JSON文件），
					- 而在widget上下文之外，或其它AssetBundle句柄不可用时，可以使用rootBundle直接加载这些asset，
						-	import 'dart:async' show Future;
							import 'package:flutter/services.dart' show rootBundle;

							Future<String> loadAsset() async {
							  return await rootBundle.loadString('assets/config.json');
							}
				- 加载图片
					- 声明分辨率相关的图片 assets
						- AssetImage 可以将asset的请求逻辑，映射到最接近当前设备，像素比例(dpi)的asset。
						- 为了使这种映射起作用，必须根据特定的目录结构来保存asset：
							-	…/image.png
								…/Mx/image.png
								…/Nx/image.png
								…etc.

						- M和N是数字标识符，对应于图像的分辨率，指定不同设备像素比例的图片。
						- 主资源默认对应于1.0倍的分辨率图片。
							-	…/my_icon.png
								…/2.0x/my_icon.png
								…/3.0x/my_icon.png
						- 设备像素比率为1.8的设备上，.../2.0x/my_icon.png 将被选择。对于2.7的设备像素比率，.../3.0x/my_icon.png将被选择。
						- 如果未在Image widget上指定渲染图像的宽度和高度，那么Image widget将占用与主资源相同的屏幕空间大小。
						- pubspec.yaml中asset部分中的每一项都应与实际文件相对应，但主资源项除外。当主资源缺少某个资源文件时，会按分辨率从低到高的顺序去选择 ，也就是说1x中没有的话会在2x中找，2x中还没有的话就在3x中找。
					- 加载图片
						- 可以使用 AssetImage类。
							-	Widget build(BuildContext context) {
								  return new DecoratedBox(
								    decoration: new BoxDecoration(
								      image: new DecorationImage(
								        image: new AssetImage('graphics/background.png'),
								      ),
								    ),
								  );
								}
							- AssetImage 并非是一个widget，实际上是一个ImageProvider，
							- 如果想直接得到一个显示图片的widget，可以使用Image.asset()方法，
								- 	Widget build(BuildContext context) {
									  return Image.asset('graphics/background.png');
									}
						- 使用默认的 asset bundle 加载资源时，内部会自动处理分辨率等，
						- 如果使用一些更低级别的类，如 ImageStream或 ImageCache 时你会注意到有与缩放相关的参数
					- 依赖包中的资源图片
						- 要加载依赖包中的图像，必须给AssetImage提供package参数。
							- 假设您的应用程序依赖于一个名为“my_icons”的包，它具有如下目录结构：
								-	…/pubspec.yaml
									…/icons/heart.png
									…/icons/1.5x/heart.png
									…/icons/2.0x/heart.png
									…etc.

								- 加载图像，使用:
									- new AssetImage('icons/heart.png', package: 'my_icons')
									- new Image.asset('icons/heart.png', package: 'my_icons')
	
						- 包在使用本身的资源时也应该加上package参数来获取。

						- 打包包中的 assets
							- pubspec.yaml文件中声明了准备使用的资源，它将会被打包到相应的package中。
							- 包本身使用的资源必须在pubspec.yaml中指定。
							- 包也可以选择在其lib/文件夹中，包含未在其pubspec.yaml文件中声明的资源。
							- 要打包的图片，应用程序必须在pubspec.yaml中指定包含哪些图像。	

								- 	…/lib/backgrounds/background1.png
									…/lib/backgrounds/background2.png
									…/lib/backgrounds/background3.png
							- pubspec.yaml的assets部分中声明它
								- 	flutter:
									  assets:
									    - packages/fancy_backgrounds/backgrounds/background1.png
											
							- lib/是隐含的，所以它不应该包含在资产路径中。

					- 特定平台 assets
						- 只在Flutter框架运行之后才能使用，比如要给我们的应用设置APP图标或者添加启动图，那我们必须使用特定平台的assets。


						-设置APP图标
							- 应用程序启动图标的方式与在本机Android或iOS应用程序中更新启动图标的方式相同。
								- Android
									- .../android/app/src/main/res目录，里面包含了各种资源文件夹，
									- 按照Android开发人员指南中的说明， 将其替换为所需的资源，并遵守每种屏幕密度（dpi）的建议图标大小标准。
									- 如果重命名.png文件，则还必须在您AndroidManifest.xml的<application>标签的android:icon属性中更新名称。

						- 更新启动页
							- 在Flutter框架加载时，Flutter会使用本地平台机制绘制启动页。此启动页将持续，到Flutter渲染应用程序的第一帧时。
							- 这意味着如果您不在应用程序的main()方法中调用runApp 函数 
							- 或者更具体地说，如果您不调用window.render去响应window.onDrawFrame）的话，
							- 启动屏幕将永远持续显示。
							- Android
								- 将启动屏幕（splash screen）添加到您的Flutter应用程序，
									- .../android/app/src/main目录
									- 在res/drawable/launch_background.xml，通过自定义drawable来实现自定义启动界面（你也可以直接换一张图片）。


			




	

	- 调试Flutter应用
		- 































	- Widget简介
		- 概念
		- Widget与Element
			- Widget其实并不是表示最终绘制在设备屏幕上的显示元素，而只是显示元素的一个配置数据。实际上，Flutter中真正代表屏幕上显示元素的类是Element，也就是说Widget只是描述Element的一个配置，
				- Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，
				- 一个Widget对象可以对应多个Element对象。
		- 主要接口
			- Widget类继承自DiagnosticableTree，DiagnosticableTree即“诊断树”，主要作用是提供调试信息。
			- Key: 这个key属性类似于React/Vue中的key，主要的作用是决定是否在下一次build时复用旧的widget，决定的条件在canUpdate()方法中。
			- createElement()：前文所述“一个Widget可以对应多个Element”；Flutter Framework在构建UI树时，会先调用此方法生成对应节点的Element对象。
			- Flutter Framework在构建UI树时，会先调用此方法生成对应节点的Element对象。
			- canUpdate(...)是一个静态方法，主要用于在Widget树重新build时复用旧的widget，具体来说，是否用新的Widget对象去更新旧UI树上所对应的Element对象的配置；只要newWidget与oldWidget的runtimeType和key同时相等时，就会用newWidget去更新Element对象的配置，否则就会创建新的Element。
			- Widget类本身是一个抽象类，其中最核心的就是定义了createElement()接口，在Flutter开发中，我们一般都不用直接继承Widget类来实现Widget，相反，我们通常会通过继承StatelessWidget和StatefulWidget来间接继承Widget类来实现，而StatelessWidget和StatefulWidget都是直接继承自Widget类，而这两个类也正是Flutter中非常重要的两个抽象类，它们引入了两种Widget模型，

		
		- Stateless Widget
			- 继承自Widget，重写了createElement()方法
			- StatelessWidget用于不需要维护状态的场景，
			- 它通常在build方法中通过嵌套其它Widget来构建UI，在构建过程中会递归的构建其嵌套的Widget。
			- widget的构造函数应使用命名参数，命名参数中的必要参数要添加@required标注，这样有利于静态代码分析器进行检查，另外，在继承widget时，第一个参数通常应该是Key，如果接受子widget的child参数，那么通常应该将它放在参数列表的最后。同样是按照惯例，widget的属性应被声明为final，防止被意外改变。
		- Stateful Widget
			- 重写了createElement()方法，
			- 不同的是返回的Element 对象并不相同；另外StatefulWidget类中添加了一个新的接口createState()
		- State
			- 一个StatefulWidget类会对应一个State类，State表示与其对应的StatefulWidget要维护的状态，
			- State中的保存的状态信息可以：
				- 在widget build时可以被同步读取。
				- 在widget生命周期中可以被改变，当State被改变时，可以手动调用其setState()方法通知Flutter framework状态发生改变，Flutter framework在收到消息后，会重新调用其build方法重新构建widget树，从而达到更新UI的目的。
			- State中有两个常用属性：
				- widget，它表示与该State实例关联的widget实例，由Flutter framework动态设置。
				- context，它是BuildContext类的一个实例，表示构建widget的上下文，它是操作widget在树中位置的一个句柄，它包含了一些查找、遍历当前Widget树的一些方法。每一个widget都有一个自己的context对象。
		- State生命周期
			- State的生命周期对flutter开发非常重要
				- initState 
					- 当Widget第一次插入到Widget树时会被调用，对于每一个State对象，Flutter framework只会调用一次该回调，所以，通常在该回调中做一些一次性的操作，如状态初始化、订阅子树的事件通知等。
				- didChangeDependencies()：
					- 当State对象的依赖发生变化时会被调用；
					- build中的组件发生变化时会被调用；
				- build()
					- 在调用initState()之后。
					- 在调用didUpdateWidget()之后。
					- 在调用setState()之后。
					- 在调用didChangeDependencies()之后。
					- 在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后。
				- reassemble()：
					- 此回调是专门为了开发调试而提供的，在热重载(hot reload)时会被调用，
				- didUpdateWidget()：
					- 在widget重新构建时，Flutter framework会调用Widget.canUpdate来检测Widget树中同一位置的新旧节点，然后决定是否需要更新，如果Widget.canUpdate返回true则会调用此回调。
					- Widget.canUpdate会在新旧widget的key和runtimeType同时相等时会返回true，也就是说在在新旧widget的key和runtimeType同时相等时didUpdateWidget()就会被调用。
				- deactivate()：
					- 当State对象从树中被移除时，会调用此回调。
				- dispose()：
					- 当State对象从树中被永久移除时调用；通常在此回调中释放资源。

		- 状态管理
			- 管理状态的最常见的方法：
				- Widget管理自己的state。
				- 父widget管理子widget状态。
				- 混合管理（父widget和子widget都管理状态）。
				- 全局状态管理
			- 如何决定使用哪种管理方法？
				- 如果状态是用户数据，如复选框的选中状态、滑块的位置，则该状态最好由父widget管理。
				- 如果状态是有关界面外观效果的，例如颜色、动画，那么状态最好由widget本身来管理。
				- 如果某一个状态是不同widget共享的则最好由它们共同的父widget管理。
			- 在widget内部管理状态封装性会好一些，而在父widget中管理会比较灵活。有些时候，如果不确定到底该怎么管理状态，那么推荐的首选是在父widget中管理（灵活会显得更重要一些）。
			
			- 全局状态管理
				- 当应用中包括一些跨widget（甚至跨路由）的状态需要同步时，正确的做法是通过一个全局状态管理器来处理这种“相距较远”的widget之间的通信。
				- 目前主要有两种办法：
					- 实现一个全局的事件总线，将语言状态改变对应为一个事件，然后在APP Widget所在的父widgetinitState 方法中订阅语言改变的事件，当用户在设置页切换语言后，我们触发语言改变事件，然后APP Widget那边就会收到通知，然后重新build一下即可。
					- 使用redux这样的全局状态包，读者可以在pub上查看其详细信息。
					- 事件处理一章中会实现一个全局事件总线。

		- Flutter widget库介绍
			- Flutter提供了一套丰富、强大的基础widget，在基础widget库之上Flutter又提供了一套Material风格（Android默认的视觉风格）和一套Cupertino风格（iOS视觉风格）的widget库。要使用基础widget库，需要先导入：
				- import 'package:flutter/widgets.dart';
			- 基础widget
				- Text：该 widget 可让您创建一个带格式的文本。
				- Row、 Column： 这些具有弹性空间的布局类Widget可让您在水平（Row）和垂直（Column）方向上创建灵活的布局。其设计是基于web开发中的Flexbox布局模型。
				- Stack： 取代线性布局 (译者语：和Android中的FrameLayout相似)，Stack允许子 widget 堆叠， 你可以使用 Positioned 来定位他们相对于Stack的上下左右四条边的位置。Stacks是基于Web开发中的绝对定位（absolute positioning )布局模型设计的。
				- Container： Container 可让您创建矩形视觉元素。container 可以装饰一个BoxDecoration, 如 background、一个边框、或者一个阴影。 Container 也可以具有边距（margins）、填充(padding)和应用于其大小的约束(constraints)。另外， Container可以使用矩阵在三维空间中对其进行变换。

			- Material widget
				- Flutter提供了一套丰富的Material widget，可帮助您构建遵循Material Design的应用程序。
				- 要使用Material widget，需要先引入它：
					- import 'package:flutter/material.dart';

			- Cupertino widget
				- Flutter也提供了一套丰富的Cupertino风格的widget，尽管目前还没有Material widget那么丰富，但也在不断的完善中。
					- 要使用Cupertino widget，需要先引入它：
						- import 'package:flutter/cupertino.dart';









				

	- 文本样式
		- Text
			- maxLines：文本显示的最大行数
			- overflow： 指定多余的文本的截取方式，一般为TextOverflow.ellipsis，表象为... 
			- textScaleFactor：相对于当前字体大小的缩放因子 
		- textAlign：文本对齐，对齐的参考系是Text Widget本身，如果，Text文本内容不满一行，Text Widget长度和文本相同。对齐则无意义。
		- TextStyle：文本显示的样式。
			- color：字体颜色
			- textScaleFactor：通过缩放比例来控制字体大小，主要是用于系统字体大小设
			- fontSize：精确指定字体大小
			- height：行高
			- fontFamily：字体
			- background：
			- decoration：
			- decorationStyle：
		- TextSpan：文本的一个片段
			- style：文本片段的样式
			- text 文本的内容
			- children：数组，包含的其他的TextSpan
			- recognizer：文本片段上对于手势的识别
		- DefaultTextStyle：设置默认文本样式
		- inherit：不继承默认样式，写在独立的TextStyle中
		- 使用字体：现在pubspec.yaml文件中声明，然后再TextStyle中使用。
			- 在asset中声明
			- 有fontFamily使用
			- Package中的字体：
				- 在TextStyle加入package：‘***’指定包名

	- 按钮
		- RaisedButton：漂浮按钮，默认带有阴影和灰色背景。按下后，阴影会变大
		- FlatButton：扁平按钮，默认背景透明并不带阴影。按下后，会有背景色
		- OutlineButton：有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影
		- IocnButton：可点击的Icon，不包括文字，默认没有背景，点击后会出现背景
		- 自定义按钮外观：按钮外观可以通过其属性来定义，不同按钮属性大同小异
	- 图片及ICON
		- 图片
			- 通过Image来加载并显示图片，Image数据源可以是asset、文件、内存以及网络
		- ImageProvider
			- 抽象类，定义了图片获取的接口 load() ，不同的数据源需要实现不同的ImageProvider。
		- Image
			- Image Widget必选image参数，对应ImageProvider
		- 参数
			- Image显示图片时定义了一系列参数，
		- ICON
			- 使用MaterialDesign字体图标
				- Flutter默认包含了一套Material Design的字体图标，在pubspec.yaml文件中的配置
					- uses-material-design: true
				- Flutter封装了一个IconData和Icon来专门显示字体图标
					-Icon(Icons.accessible,color: Colors.green,),
				- 使用自定义字体图标
					- 使用自定义字体图标，使用ttf格式即可
	- 单选开关和复选框
		- 单选开关Switch和复选框Checkbox，它们都是继承自StatelessWidget，它们本身不会保存当前选择状态一般都是在父widget中管理选中状态。当用户点击Switch或Checkbox时，它们会触发onChanged回调，在此回调中处理选中状态改变逻辑。
		- 属性及外观	
			- activeColor：设置激活态的颜色。
			- tristate：表示是否为三态。
	- 输入框及表单
		- TextField：文本输入
			- 属性
				- controller：设置/获取编辑框的内容、选择编辑内容、监听编辑文本改变事件。
				- focusNode：控制TextField是否占有当前键盘的输入焦点。
				- InputDecoration：控制TextField的外观显示。
				- keyboardType：设置该输入框默认的键盘输入类型。
					- TextInputType
						- text：文本输入键盘 
						- multiline：多行文本，需和maxLines配合使用(设为null或大于1)
						- number：数字；会弹出数字键盘。
						- phone：优化后的电话号码输入键盘；会弹出数字键盘并显示"* #" 
						- datetime：优化后的日期输入键盘；Android上会显示“: -”
						- emailAddress：优化后的电子邮件地址；会显示“@ .”
						- url：优化后的url输入键盘； 会显示“/ .” 
				- textInputAction：键盘动作按钮图标(即回车键位图标)。
				- style：正在编辑的文本样式。
				- textAlign：输入框内编辑文本在水平方向的对齐方式。
				- autofocus：是否自动获取焦点。
				- obscureText：是否隐藏正在编辑的文本，如用于输入密码的场景等，文本内容会用“•”替换。
				- maxLines：输入框的最大行数，默认为1；如果为null，则无行数限制。
				- maxLength和maxLengthEnforced：maxLength代表输入框文本的最大长度，设置后输入框右下角会显示输入的文本计数。maxLengthEnforced决定当输入文本长度超过maxLength时是否阻止输入，为true时会阻止输入，为false时不会阻止输入但输入框会变红。
				- onChange：输入框内容改变时的回调函数；注：内容改变事件也可以通过controller来监听。
				- onEditingComplete和onSubmitted：这两个回调都是在输入框输入完成时触发，比如按了键盘的完成键（对号图标）或搜索键（🔍图标）。不同的是两个回调签名不同，onSubmitted回调是ValueChanged<String>类型，它接收当前输入内容做为参数，而onEditingComplete不接收参数。
				- inputFormatters：用于指定输入格式；当用户输入内容改变时，会根据指定的格式来校验。
				- enable：如果为false，则输入框会被禁用，禁用状态不接收输入和事件，同时显示禁用态样式（在其decoration中定义）。
				- cursorWidth、cursorRadius和cursorColor：这三个属性是用于自定义输入框光标宽度、圆角和颜色的。
			- 获取输入内容
				- 定义两个变量，用于保存用户名和密码，然后在onChange触发时，各自保存一下输入内容。
				- 通过controller直接获取。
			- 监听文本变化
				- 设置onChange回调
				- 通过controller监听
			- 控制焦点
				- 通过FocusNode和FocusScopeNode来控制
			- 监听焦点状态改变事件
				- 通过FocusNode可以监听焦点的改变事件
			- 自定义样式
				- decoration：定义输入框样式
				- 有一些样式都是不能直接自定义的，如下滑线的颜色和宽度，使用的颜色是主题色里面的hintColor，提示文本颜色也是用的hintColor， 如果我们直接修改hintColor，那么下划线和提示文本的颜色都会变
					- 通过设置decoration的hintStyle，覆盖hintColor
					- 主题中可以通过inputDecorationTheme来设置输入框默认的decoration。
					- 另一种灵活的方式是直接隐藏掉TextField本身的下划线，然后通过Container去嵌套定义样式
		- 表单Form
			- Form
				- autovalidate：是否自动校验输入内容
				- onWillPop：决定Form所在的路由是否可以直接返回（如点击返回按钮）
				- onChanged：Form的任意一个子FormField内容发生变化时会触发此回调。
			- FormField
				- Form的子孙元素必须是FormField类型，FormField是一个抽象类，定义几个属性，FormState内部通过它们来完成操作
				- TextFormField：除了FormField定义的属性之外，它还包括TextField的属性。
			- FormState
				- Form的State类，通过Form.of()或GlobalKey获得
				- 通过它来对Form的子孙FormField进行统一操作
					- FormState.validate()：调用此方法后，会调用Form子孙FormField的validate回调，如果有一个校验失败，则返回false，所有校验失败项都会返回用户返回的错误提示。
					- FormState.save()：调用此方法后，会调用Form子孙FormField的save回调，用于保存表单内容
					- FormState.reset()：调用此方法后，会将子孙FormField的内容清空。
			- 登录按钮的onPressed方法中不能通过Form.of(context)来获取，正确的做法是通过Builder来构建登录按钮，Builder会将widget节点的context作为回调参数
			
			
			
			
			
			
			
			
			
			
			
	- 布局类Widget
		- 简介。
			- 根据Widget是否需要包含子节点将Widget分为了三类
				- LeafRenderObjectWidget: 
					- Widget树的叶子节点，用于没有子节点的widget，通常基础widget都属于这一类，如Text、Image。
				- SingleChildRenderObjectWidget:
					- 包含一个子Widget，如：ConstrainedBox、DecoratedBox等
				- MultiChildRenderObjectWidget:
					- 包含多个子Widget，一般都有一个children参数，接受一个Widget数组。如Row、Column、Stack等
					

	
	
	
	- 线性布局Row和Column
		- 概述
			- 线性布局，即指沿水平或垂直方向排布子Widget。
		- 主轴和纵轴
			- 布局是沿水平方向，那么主轴就是指水平方向，而纵轴即垂直方向；如果布局沿垂直方向，那么主轴就是指垂直方向，而纵轴就是水平方向。
			- 线性布局中，有两个定义对齐方式的枚举类 MainAxisAlignment 和 CrossAxisAlignment ，分别代表主轴对齐和纵轴对齐。
		- Row
			- Row可以在水平方向排列其子widget
				-	Row({
					  ...  
					  TextDirection textDirection,    
					  MainAxisSize mainAxisSize = MainAxisSize.max,    
					  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,
					  VerticalDirection verticalDirection = VerticalDirection.down,  
					  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,
					  List<Widget> children = const <Widget>[],
					})
			- 属性
				- textDirection
					- 水平方向子widget的布局顺序,默认为系统当前Locale环境的文本方向
				- mainAxisSize
					- Row在主轴(水平)方向占用的空间，
					- 默认是MainAxisSize.max，表示尽可能多的占用水平方向的空间，
					- MainAxisSize.min表示尽可能少的占用水平空间，当子widgets没有占满水平剩余空间，则Row的实际宽度等于所有子widgets占用的的水平空间；
				- mainAxisAlignment
					- 子Widgets在Row所占用的水平空间内对齐方式，如果mainAxisSize值为MainAxisSize.min，则此属性无意义，
						- MainAxisAlignment.start表示沿textDirection的初始方向对齐
						- 而MainAxisAlignment.end和MainAxisAlignment.start正好相反；
						- MainAxisAlignment.center表示居中对齐。
				- verticalDirection
					- Row纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。
				- crossAxisAlignment
					- 子Widgets在纵轴方向的对齐方式，
					- 即verticalDirection值为VerticalDirection.down时crossAxisAlignment.start指顶部对齐
					- verticalDirection值为VerticalDirection.up时，crossAxisAlignment.start指底部对齐；
					- 而crossAxisAlignment.end和crossAxisAlignment.start正好相反；
				- children 
					- 子Widgets数组。
					
		- Column
			- Column可以在垂直方向排列其子widget。
			- 特殊情况
				- 如果Row里面嵌套Row，或者Column里面再嵌套Column，那么只有对最外面的Row或Column会占用尽可能大的空间，里面Row或Column所占用的空间为实际大小，
				- 如果要让里面的Column占满外部Column，可以使用Expanded widget：
					- mainAxisAlignment: MainAxisAlignment.center, 
		
		
		
		
	- 弹性布局
		- 弹性布局允许子widget按照一定比例来分配父容器空间，
		
		- Flex	
			- Flex可以沿着水平或垂直方向排列子widget，
			- 使用Row或Column会方便一些，	
			- 能使用Flex的地方一定可以使用Row或Column。
			- 也可以和Expanded配合实现弹性布局，
			-	
				Flex({
				  ...
				  @required this.direction, //弹性布局的方向, Row默认为水平方向，Column默认为垂直方向
				  List<Widget> children = const <Widget>[],
				})
		- Expanded
			- 可以按比例“扩伸”Row、Column和Flex子widget所占用的空间。
				-	
					const Expanded({
					  int flex = 1, 
					  @required Widget child,
					})
			- flex为弹性系数，如果为0或null，则child是没有弹性的，即不会被扩伸占用的空间。
			- 如果大于0，所有的Expanded按照其flex的比例来分割主轴的全部空闲空间。	
					
					
					
					
					
					
					
					
					
					
					
					
					
	- Scaffold、TabBar、底部导航
		- Scaffold
			- Scaffold Widget，它是一个路由页的骨架，可以非常容易的拼装出一个完整的页面。
			- AppBar
				- AppBar是一个Material风格的导航栏，它可以设置标题、导航栏菜单、底部Tab等。下面我们看看AppBar的定义：
					- leading
						- 导航栏最左侧Widget，常见为抽屉菜单按钮或返回按钮。
					- automaticallyImplyLeading = true
						- 如果leading为null，是否自动实现默认的leading按钮
					- title
						- 页面标题
					- actions
						- 导航栏右侧菜单
					- bottom
						- 导航栏底部菜单，通常为Tab按钮组
					- elevation = 4.0
						- 导航栏阴影
					- centerTitle
						- 标题是否居中 
					- 其它属性见源码注释
				- 如果给Scaffold添加了抽屉菜单，默认情况下Scaffold会自动将AppBar的leading设置为菜单按钮,
				- 如果我们想自定义菜单图标，可以手动来设置leading
					- 	Scaffold(
						  appBar: AppBar(
							title: Text("App Name"),
							leading: Builder(builder: (context) {
							  return IconButton(
								icon: Icon(Icons.dashboard, color: Colors.white), //自定义图标
								onPressed: () {
								  // 打开抽屉菜单  
								  Scaffold.of(context).openDrawer(); 
								},
							  );
							}),
							...  
						  )
					
				- Flutter还有一种通用的获取StatefulWidget对象State的方法：通过GlobalKey来获取！ 步骤有两步：	
					- 给目标StatefulWidget添加GlobalKey
						- 定义一个globalKey, 由于GlobalKey要保持全局唯一性，我们使用静态变量存储
							-	static GlobalKey<ScaffoldState> _globalKey= new GlobalKey();
								...
								Scaffold(
									key: _globalKey , //设置key
									...  
								)
					- 通过GlobalKey来获取State对象
						-	_globalKey.currentState.openDrawer()
					
！！！!	！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！		
			- TabBar		
				- 通过“bottom”属性来添加一个导航栏底部tab按钮组，
				- Material组件库中提供了一个TabBar组件，它可以快速生成Tab菜单，	
				********************************************************************
					-	class _ScaffoldRouteState extends State<ScaffoldRoute>
							with SingleTickerProviderStateMixin {

						  TabController _tabController; //需要定义一个Controller
						  List tabs = ["新闻", "历史", "图片"];

						  @override
						  void initState() {
							super.initState();
							// 创建Controller  
							_tabController = TabController(length: tabs.length, vsync: this);
						  }

						  @override
						  Widget build(BuildContext context) {
							return Scaffold(
							  appBar: AppBar(
								... //省略无关代码
								bottom: TabBar(   //生成Tab菜单
								  controller: _tabController,
								  tabs: tabs.map((e) => Tab(text: e)).toList()
								),
							  ),
							  ... //省略无关代码

						  }
			****************************************************************************		
					
					
					
			
			
			
			
			
			
			- 抽屉菜单Drawer
				- Scaffold的drawer和endDrawer属性可以分别接受一个Widget作为页面的左、右抽屉菜单，如果开发者提供了抽屉菜单，那么当用户手指从屏幕左/右向里滑动时便可打开抽屉菜单。
				- 左抽屉菜单MyDrawer
			
			
			
			
			
				
				
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	- 可滚动Widget简介
		- 当内容超过显示视口(ViewPort)时，如果没有特殊处理，Flutter则会提示Overflow错误。
		- Flutter提供了多种可滚动widget（Scrollable Widget）用于显示列表和长布局。
		- 可滚动Widget都直接或间接包含一个Scrollable widget，因此它们包括一些共同的属性，
		
		*************************************************************************************
			- 	Scrollable({
				  ...
				  this.axisDirection = AxisDirection.down,
				  this.controller,
				  this.physics,
				  @required this.viewportBuilder, //后面介绍
				})
						
		
		
		*************************************************************************************																					
			- axisDirection：滚动方向。
			- physics：此属性接受一个ScrollPhysics对象，它决定可滚动Widget如何响应用户操作，
				- Flutter SDK中包含了两个ScrollPhysics的子类可以直接使用：
					- ClampingScrollPhysics：Android下微光效果。
					- BouncingScrollPhysics：iOS下弹性效果。
			- controller：此属性接受一个ScrollController对象，ScrollController的主要作用是控制滚动位置和监听滚动事件。
		- Scrollbar
			- Scrollbar是一个Material风格的滚动指示器（滚动条），
			- 如果要给可滚动widget添加滚动条，只需将Scrollbar作为可滚动widget的父widget即可，
		- CupertinoScrollbar
			- CupertinoScrollbar是iOS风格的滚动条，如果你使用的是Scrollbar，那么在iOS平台它会自动切换为CupertinoScrollbar。
		- ViewPort视口
			- 在Flutter中，术语ViewPort（视口），如无特别说明，则是指一个Widget的实际显示区域。
		- 主轴和纵轴
			- 将滚动方向称为主轴，非滚动方向称为纵轴。
			
			
	- SingleChildScrollView
		- SingleChildScrollView类似于Android中的ScrollView，它只能接收一个子Widget
		
		*************************************************************************************
				SingleChildScrollView({
				  this.scrollDirection = Axis.vertical, //滚动方向，默认是垂直方向
				  this.reverse = false, 
				  this.padding, 
				  bool primary, 
				  this.physics, 
				  this.controller,
				  this.child,
				})	
				
		*************************************************************************************
			- reverse
				- 解释是：是否按照阅读方向相反的方向滑动，
				- scrollDirection值为Axis.horizontal
				- 如果阅读方向是从左到右
				- reverse为true时，那么滑动方向就是从右往左。
			- primary
				- 指是否使用widget树中默认的PrimaryScrollController；
				- 当滑动方向为垂直方向（scrollDirection值为Axis.vertical）并且controller没有指定时，primary默认为true.
	
	- ListView	
		- ListView是最常用的可滚动widget，它可以沿一个方向线性排布所有子widget。
		
		**************************************************************************************
				ListView({
				  ...  
				  //可滚动widget公共参数
				  Axis scrollDirection = Axis.vertical,
				  bool reverse = false,
				  ScrollController controller,
				  bool primary,
				  ScrollPhysics physics,
				  EdgeInsetsGeometry padding,

				  //ListView各个构造函数的共同参数  
				  double itemExtent,
				  bool shrinkWrap = false,
				  bool addAutomaticKeepAlives = true,
				  bool addRepaintBoundaries = true,
				  double cacheExtent,

				  //子widget列表
				  List<Widget> children = const <Widget>[],
				})
				
		************************************************************************************
			- itemExtent：该参数如果不为null，则会强制children的"长度"为itemExtent的值；
				- 长度"是指滚动方向上子widget的长度，
				- 如果滚动方向是垂直方向，则itemExtent代表子widget的高度，
				- 如果滚动方向为水平方向，则itemExtent代表子widget的长度。
				- 指定itemExtent比让子widget自己决定自身长度会更高效，这是因为指定itemExtent后，滚动系统可以提前知道列表的长度，而不是总是动态去计算，尤其是在滚动位置频繁变化时（滚动系统需要频繁去计算列表高度）。
			- shrinkWrap：该属性表示是否根据子widget的总长度来设置ListView的长度，默认值为false 。
			- addAutomaticKeepAlives：该属性表示是否将列表项（子widget）包裹在AutomaticKeepAlive widget中；	
			- addRepaintBoundaries：该属性表示是否将列表项（子widget）包裹在RepaintBoundary中。	
		- 默认构造函数
			- 默认构造函数有一个children参数，它接受一个Widget列表（List）。
			- 通过此方式创建的ListView和使用SingleChildScrollView+Column的方式没有本质的区别	
			- 可滚动widget通过一个List来作为其children属性时，只适用于子widget较少的情况，这是一个通用规律，并非ListView自己的特性，像GridView也是如此。
		- ListView.builder
			- ListView.builder适合列表项比较多（或者无限）的情况，因为只有当子Widget真正显示的时候才会被创建。
			
			*******************************************************************************************
					ListView.builder({
					  // ListView公共参数已省略  
					  ...
					  @required IndexedWidgetBuilder itemBuilder,
					  int itemCount,
					  ...
					})
					
			*******************************************************************************************
				- itemBuilder：
					- 它是列表项的构建器，类型为IndexedWidgetBuilder，返回值为一个widget。
					- 当列表滚动到具体的index位置时，会调用该构建器构建列表项。
				- itemCount：列表项的数量，如果为null，则为无限列表。
		- ListView.separated
			- ListView.separated可以生成列表项之间的分割器，它除了比ListView.builder多了一个separatorBuilder参数，该参数是一个分割器生成器。
		- 实例：无限加载列表
			- 假设我们要从数据源异步分批拉取一些数据，然后用ListView显示，当我们滑动到列表末尾时，判断是否需要再去拉取数据，如果是，则去拉取，拉取过程中在表尾显示一个loading，拉取成功后将数据插入列表；如果不需要再去拉取，则在表尾提示"没有更多"。
			
			*********************************************************************************************